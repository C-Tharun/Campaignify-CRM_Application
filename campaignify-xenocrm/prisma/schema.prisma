// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  country    String
  totalSpent Float     @default(0)
  lastVisit  DateTime?
  visitCount Int       @default(0)
  orders     Order[]
  segments   Segment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  amount     Float
  currency   String      @db.Char(3)
  status     OrderStatus @default(PENDING)
  items      OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([customerId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model Segment {
  id          String     @id @default(cuid())
  name        String
  description String?
  rules       Json
  customers   Customer[]
  campaigns   Campaign[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Campaign {
  id          String           @id @default(cuid())
  name        String
  description String?
  segmentId   String
  segment     Segment          @relation(fields: [segmentId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  status      CampaignStatus  @default(DRAFT)
  messages    Message[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Message {
  id          String         @id @default(cuid())
  campaignId  String
  campaign    Campaign       @relation(fields: [campaignId], references: [id])
  customerId  String
  content     String         @db.Text
  status      MessageStatus  @default(PENDING)
  sentAt      DateTime?
  deliveredAt DateTime?
  failedAt    DateTime?
  error       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
} 